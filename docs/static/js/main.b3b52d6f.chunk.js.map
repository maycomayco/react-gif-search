{"version":3,"sources":["components/AddCategory.js","services/giphy.service.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","handleSubmit","e","preventDefault","trim","length","cats","as","width","onSubmit","spacing","direction","name","value","onChange","target","placeholder","backgroundColor","size","color","roundedRight","roundedLeft","aria-label","icon","src","p","onClick","getGifs","category","a","query","encodeURI","url","fetch","resp","json","data","gifs","map","img","id","title","images","fixed_height_small","getGifsRandom","GifGridItem","w","h","className","overflow","alt","objectFit","maxH","fontSize","isTruncated","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","pb","templateColumns","gap","GifExpertApp","categories","padding","minW","cat","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b3b52d6f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Box, Input, IconButton, SearchIcon, Stack } from \"@chakra-ui/react\"\n\nexport const AddCategory = ({ setCategories }) => {\n\tconst [inputValue, setInputValue] = useState('');\n\n\t// e es el event de onChange() en el input\n\tconst handleInputValue = (e) => {\n\t\tsetInputValue(e.target.value);\n\t}\n\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\t\tif (inputValue.trim().length > 2) {\n\t\t\t// seteamos los nuevos valores a buscar, el ultimo ingresado primero\n\t\t\tsetCategories( cats => [inputValue, ...cats] );\n\t\t\tsetInputValue('');\n\t\t}\n\t}\n\n\treturn(\n\t\t<Box as=\"form\" width=\"100%\" onSubmit={e => handleSubmit(e)}>\n\t\t\t<Stack spacing={0} direction=\"row\">\n\t\t\t\t<Input\n\t\t\t\t\tname=\"query\"\n\t\t\t\t\tvalue={inputValue}\n\t\t\t\t\tonChange={handleInputValue}\n\t\t\t\t\tplaceholder=\"Search gif\"\n\t\t\t\t\tbackgroundColor=\"white\"\n\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\tcolor=\"blackAlpha.900\"\n\t\t\t\t\troundedRight={0}\n\t\t\t\t\troundedLeft=\"sm\"\n\t\t\t\t/>\n\t\t\t\t<IconButton\n\t\t\t\t\taria-label=\"Search\"\n\t\t\t\t\ticon={<img src=\"https://icongr.am/clarity/search.svg?size=20&color=#666\"/>}\n\t\t\t\t\troundedLeft={0}\n\t\t\t\t\troundedRight=\"sm\"\n\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\tp={2}\n\t\t\t\t\tonClick={e => handleSubmit(e)}\n\t\t\t\t/>\n\t\t\t</Stack>\n\t\t</Box>\n\t)\n};\n\nAddCategory.propTypes = {\n\t// declaro que propTypes es de tipo funcion y requerida\n\tsetCategories: PropTypes.func.isRequired,\n};","export const getGifs = async(category) => {\n\tconst api_key = 'mZR7gtiszIy2NobJHS9TRui5MWSiMlWV';\n\tconst query = encodeURI(category);\n\tconst url = `https://api.giphy.com/v1/gifs/search?q=${query}&api_key=${api_key}&limit=10`;\n\n\t// revisar doc de fetch\n\tconst resp = await fetch(url);\n\tconst { data } = await resp.json(); //obtengo solo la property que necesito\n\n\t// esto deberia ser un transform, de lo que me devuelve la API original y lo que realmente necesita mi App\n\tconst gifs = data.map( img => {\n\t\treturn {\n\t\t\tid: img.id,\n\t\t\ttitle: img.title,\n\t\t\turl: img.images?.fixed_height_small.url, //con (?) decimos que si vienen images entonces lo utilizamos\n\t\t};\n\t});\n\n\treturn gifs;\n};\n\nexport const getGifsRandom = async() => {\n\tconst api_key = 'mZR7gtiszIy2NobJHS9TRui5MWSiMlWV';\n\tconst url = `https://api.giphy.com/v1/gifs/trending?api_key=${api_key}&limit=10`;\n\n\t// revisar doc de fetch\n\tconst resp = await fetch(url);\n\tconst { data } = await resp.json(); //obtengo solo la property que necesito\n\n\t// esto deberia ser un transform, de lo que me devuelve la API original y lo que realmente necesita mi App\n\tconst gifs = data.map( img => {\n\t\treturn {\n\t\t\tid: img.id,\n\t\t\ttitle: img.title,\n\t\t\turl: img.images?.fixed_height_small.url, //con (?) decimos que si vienen images entonces lo utilizamos\n\t\t};\n\t});\n\n\treturn gifs;\n};\n","import React from \"react\";\nimport { Box, Image, Text, Stack } from \"@chakra-ui/react\"\n\nexport const GifGridItem = ({title, url}) => {\n\n\treturn(\n\t\t<Stack w=\"100%\" h=\"100%\" className=\"animate__animated animate__fadeIn\" overflow=\"hidden\">\n\t\t\t<Image\n\t\t\t\tsrc={url}\n\t\t\t\talt={title}\n\t\t\t\tobjectFit=\"cover\"\n\t\t\t\tmaxH=\"200px\"\n\t\t\t\th=\"200px\"\n\t\t\t/>\n\t\t\t<Text as=\"i\" fontSize=\"sm\" isTruncated>{ title }</Text>\n\t\t</Stack>\n\t);\n}","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\nimport { Heading, Grid } from \"@chakra-ui/react\"\n\nexport const GifGrid = ({ category }) => {\n\n\t// cuando estamos haciendo la desestructuracion estamos renombrando data por images 'data:images\n\tconst { data:images, loading } = useFetchGifs( category );\n\n\treturn(\n\t\t<>\n\t\t\t{ category && <Heading size=\"sm\" pb={3}>You searched for: { category }</Heading>}\n\t\t\t<hr />\n\t\t\t{/* forma corta un operador ternario sin else */}\n\t\t\t{ loading && <p>Loading...</p>}\n\t\t\t<Grid templateColumns=\"repeat(auto-fill, minmax(250px, 1fr))\" gap={5}>\n\t\t\t\t{\n\t\t\t\t\timages.map( img =>\n\t\t\t\t\t\t<GifGridItem\n\t\t\t\t\t\t\tkey={img.id}\n\t\t\t\t\t\t\t{...img} //paso todos los params que vengan en img, como singulares\n\t\t\t\t\t\t/>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t</Grid>\n\t\t</>\n\t);\n}","import { useEffect, useState } from \"react\"\nimport { getGifs, getGifsRandom } from \"../services/giphy.service\";\n\nexport const useFetchGifs = (category) => {\n\n\tconst [state, setState] = useState({\n\t\tdata: [],\n\t\tloading: true,\n\t});\n\n\tuseEffect( () => {\n\t\tif (category) {\n\t\t\tgetGifs(category)\n\t\t\t\t.then(images => setState({\n\t\t\t\t\tdata: images,\n\t\t\t\t\tloading: false\n\t\t\t\t}));\n\t\t} else {\n\t\t\tgetGifsRandom()\n\t\t\t\t.then(images => setState({\n\t\t\t\t\tdata: images,\n\t\t\t\t\tloading: false\n\t\t\t\t}));\n\t\t}\n\t}, [category]);\n\t// si cambia category se vuelve a disparar el hook\n\n\treturn state;\n}","import { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\nimport { Box, Stack, Heading, Container, List } from \"@chakra-ui/react\"\n\nexport const GifExpertApp = () => {\n\tconst [categories, setCategories] = useState(['']);\n\t// const [categories, setCategories] = useState(['Chavo']);\n\n\treturn (\n\t\t<Box>\n\t\t\t<Stack direction=\"row\" padding={4} spacing={4} backgroundColor=\"gray.800\" color=\"white\">\n\t\t\t\t<Heading size=\"sm\" minW=\"125px\" p=\"6px 0\">Search Gif App</Heading>\n\t\t\t\t<AddCategory setCategories={ setCategories } />\n\t\t\t</Stack>\n\t\t\t<Box p={4}>\n\t\t\t\t{\n\t\t\t\t\tcategories.map( cat => (\n\t\t\t\t\t\t<GifGrid\n\t\t\t\t\t\t\tkey={ cat }\n\t\t\t\t\t\t\tcategory={ cat }\n\t\t\t\t\t\t/>\n\t\t\t\t\t))\n\t\t\t\t}\n\t\t\t</Box>\n\t\t</Box>\n\t);\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// acc normalize to project\nimport 'normalize.css';\n// import './index.css';\nimport { GifExpertApp } from \"./GifExpertApp\";\nimport reportWebVitals from './reportWebVitals';\n// 1. import `ChakraProvider` component\nimport { ChakraProvider } from \"@chakra-ui/react\"\n\nReactDOM.render(\n  <ChakraProvider>\n    <GifExpertApp />\n  </ChakraProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}